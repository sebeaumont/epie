#lang pie

Atom
(Pair Atom Atom)

(car (the (Pair Atom Atom) (cons 'foo 'bar)))

(car (the (Pair (Pair Atom Atom) Atom)
       (cons (cons 'aubergine 'courgette) 'tomato)))

(Pair (car (the (Pair U Atom) (cons Atom 'olive)))
      (cdr (the (Pair Atom U) (cons 'oil Atom))))

(claim one Nat)
(define one (add1 zero))

(claim TwoAtoms U)
(define TwoAtoms (Pair Atom Atom))

(claim vegetables TwoAtoms)
(define vegetables (cons 'celery 'carrot))

(which-Nat 4
  'naught
  (lambda (_) 'more))

(claim + (-> Nat Nat Nat))
(define +
  (lambda (x y)
    (iter-Nat x
      y
      (lambda (plus-1) (add1 plus-1)))))

(claim gauss (-> Nat Nat))
(define gauss
  (lambda (n)
    (rec-Nat n
      0
      (lambda (n-1 gauss-1) (+ (add1 n-1) gauss-1)))))

(gauss 5)

(claim Pear U)
(define Pear (Pair Nat Nat))

(claim Pear-maker U)
(define Pear-maker (-> Nat Nat Pear))

(claim elim-Pear (-> Pear Pear-maker Pear))
(define elim-Pear
  (lambda (pear maker) (maker (car pear) (cdr pear))))

(elim-Pear (cons 3 17) (lambda (a d) (cons d a)))

(claim add-pears (-> Pear Pear Pear))
(define add-pears
  (lambda (a-pear other-pear)
    (elim-Pear a-pear
               (lambda (pa pb)
                 (elim-Pear other-pear
                            (lambda (oa ob)
                              (cons (+ pa pb) (+ oa ob))))))))

(add-pears (cons 1 32) (cons 0 42))

(claim flip
  (Pi ((A U)
       (B U))
    (-> (Pair A B) (Pair B A))))
(define flip
  (lambda (A B) (lambda (p) (cons (cdr p) (car p)))))

((flip Nat Nat) (cons 1 2))
((flip Atom Nat) (cons 'mu 42))

(claim flip-Nats (-> (Pair Nat Nat) (Pair Nat Nat)))
(define flip-Nats (flip Nat Nat))
(flip-Nats (cons 9 0))

(claim elim-Pair
  (Pi ((A U)
       (B U)
       (X U))
    (-> (Pair A B) (-> A B X) X)))

(define elim-Pair
  (lambda (A B X) (lambda (p f) (f (car p) (cdr p)))))

(elim-Pair Nat Atom Atom (cons 3 'pie) (lambda (_ k) k))
