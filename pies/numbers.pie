#lang pie

(claim + (-> Nat Nat Nat))
(define +
  (lambda (x y)
    (iter-Nat x
      y
      (lambda (y+x-1) (add1 y+x-1)))))

(claim double (-> Nat Nat))

(define double
  (lambda (n)
    (iter-Nat n
      zero
      (+ 2))))

(claim Even (-> Nat U))

(define Even
  (lambda (n)
    (Sigma ((half Nat)) (= Nat n (double half)))))

(Even 10)

(the (Even 10) (cons 5 (same 10)))

(claim ten-is-even (Even 10))
(define ten-is-even (cons 5 (same 10)))

(claim zero-is-even (Even 0))
(define zero-is-even (cons zero (same zero)))

(claim Evem (-> Nat U))

(define Evem
  (lambda (n)
    (Sigma ((half Nat)) (= Nat n (+ half half)))))

(claim ten-is-evem (Evem 10))
(define ten-is-evem (cons 5 (same 10)))

(claim +two-even (Pi ((n Nat)) (-> (Even n) (Even (+ 2 n)))))

(define +two-even
  (lambda (n even-n)
    (cons (add1 (car even-n))
          (cong (cdr even-n) (+ 2)))))

(claim two-is-even (Even 2))
(define two-is-even (+two-even 0 zero-is-even))

(claim Odd (-> Nat U))
(define Odd (lambda (n) (Even (add1 n))))

(claim one-is-odd (Odd 1))
(define one-is-odd (cons 1 (same 2)))

(claim three-is-odd (Odd 3))
(define three-is-odd (cons 2 (same 4)))

(claim add-1-odd->even (Pi ((n Nat)) (-> (Odd n) (Even (add1 n)))))
(claim add-1-even->odd (Pi ((n Nat)) (-> (Even n) (Odd (add1 n)))))

(define add-1-odd->even
  (lambda (n odd1) odd1))

(define add-1-even->odd
  (lambda (n even1) (cons (add1 (car even1)) (cong (cdr even1) (+ 2)))))

(add-1-odd->even 1 one-is-odd)
(add-1-even->odd 0 zero-is-even)

(the (Either (Even zero) (Odd 0)) (left zero-is-even))

(claim even-or-odd (Pi ((n Nat)) (Either (Even n) (Odd n))))
(define even-or-odd
  (lambda (n)
    (ind-Nat n
      (lambda (k) (Either (Even k) (Odd k)))
      (left zero-is-even)
      (lambda (n-1 n-1-eo)
        (ind-Either n-1-eo
          (lambda (_) (Either (Even (add1 n-1)) (Odd (add1 n-1))))
          (lambda (x) (right (add-1-even->odd n-1 x)))
          (lambda (y) (left (add-1-odd->even n-1 y))))))))

(even-or-odd 3)
(even-or-odd 8)
